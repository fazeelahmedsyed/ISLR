inv}
}
cacheSolve(makeCacheMatrix(1:4))
cacheSolve(makeCacheMatrix(1:4))
?trycatch
?tryCatch
?solve
makeCacheMatrix <- function (x = matrix()) {
inv <- NULL
set <- function (y = matrix()) {
x <<- y
inv <<- NULL}
get <- function (){
x}
setinverse <- function(i) {
inv <<- i}
getinverse <- function() {
inv }
list <- list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function (x,...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("Retrieving cached inverse")
return(inv)}
else{
mat <- x$get()
inv <- solve(mat)
x$setinverse(inv)
inv}
}
m <- rbind(c(1,-1/4),c(-1/4,1))
makeCacheMatrix(m)
f<- makeCacheMatrix(m)
cacheSolve(f)
version
getwd()
R.home()
Sys.getenv("PATH")
R.home()
Sys.getenv("PATH")
path.expand()
Sys.getenv()
Sys.getenv("MySQL_HOME")
install.packages('RMySQL', type = 'source')
library(MySQL)
Sys.getenv()
install.packages('RMySQL', type = 'source')
Sys.getenv()
?Sys.setenv
Sys.getenv()
Sys.getenv()
install.packages("RMySQL", type = "source")
library(RMySQL)
library("RMySQL")
Sys.getenv()
install.packages("RMySQL", type = "source")
library(RMySQL)
library(swirl)
swirl()
size_gb <- size_mb/2^10
View(cran2)
View(cran3)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
View(cran3)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(by_package, mean(size))
submit()
by_package
View(by_package)
View(by_package)
?n_distinct()
submit()
sumbit
submit
submit()
submit()
quit()
quit()
?connections
quit()
setwd("~/Coursera")
dir()
?formatC()
setwd("C:\Users\Dell\Documents\ISLR")
setwd("C://Users//Dell//Documents//ISLR")
getwd()
setwd("~/Coursera")
setwd("~/Documents")
setwd("C://Users//Dell//Documents")
mkdir("UMT")
?mkdir()
Library(MASS)
install.packages("MASS")
#This function is for Classification Methods LR,LDA,QDA and KNN.
#Loading Libraries
library(ISLR)
#Preparing Dataset
Smarket <- Smarket
a <- c("The year that the observation was recorded","Percentage return for previous day","Percentage return for 2 days previous","Percentage return for 3 days previous","Percentage return for 4 days previous","Percentage return for 5 days previous","Volume of shares traded (number of daily shares traded in billions)","Percentage return for today","A factor with levels Down and Up indicating whether the market had a positive or negative return on a given day")
Smarket_desc <- data.frame(cbind(colnames(Smarket),a))
colnames(Smarket_desc) <- c("variable","Variable Description")
rm(a)
#Creating Correlation matrix and identifying highly correlated variables
Smarket_cor <- cor(Smarket[,-9])
sort(Smarket_cor, decreasing = T)
which(Smarket_cor > 0.5 & Smarket_cor < 1, arr.ind = T)
colnames(Smarket_cor)[c(1,7)]
#Observing the highly correlated variables
plot(Smarket$Volume, col = "dark grey", pch = 4)
print("Volume appears to increase with time")
#Running Logistic Regression on the Dataset
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
summary(glm.fit)$coefs
summary(glm.fit)$coef
names(summary(glm.fit))
summary(glm.fit)$coefficients
summary(glm.fit)$contrasts
contrasts(summary(glm.fit))
summary(glm.fit)
summary(glm.fit)$coefficients[,4]
summary(glm.fit)$coefficients[4,]
summary(glm.fit)$coefficients
contrasts(Direction)
contrasts(Smarket$Direction)
attach(Smarket)
?predict()
glm.fit_probs <- predict(glm.fit, type = "response")
glm.fit_probs[1:10]
predict(glm.fit)[1:10]
.rs.restartR()
library(MASS)
search()
.rs.restartR()
search()
q()
getwd()
?read.csv
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt")
y
dim(y)
y <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/y_test.txt", sep = "", header = F)
dim(y)
y[1:10]
y[1:10,]
str(y)
y <- as.factor(y)
y[,1] <- as.factor(y[,1])
str(y)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt")
X[1:5,1:5]
dim(X)
X[1:5,1
]
X[1,1]
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "")
X[1,1]
head(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/X_test.txt", sep = "", header = F)
dim(X)
X <- read.csv("~/Coursera/HARdata/UCI HAR Dataset/test/subject_test.txt", sep = "", header = F)
dim(X)
?read.table
?data.table
>read.table
read.table
?read.table
args(read.table)
library(ISLR)
Smarket <- Smarket
a <- c("The year that the observation was recorded","Percentage return for previous day","Percentage return for 2 days previous","Percentage return for 3 days previous","Percentage return for 4 days previous","Percentage return for 5 days previous","Volume of shares traded (number of daily shares traded in billions)","Percentage return for today","A factor with levels Down and Up indicating whether the market had a positive or negative return on a given day")
Smarket_desc <- data.frame(cbind(colnames(Smarket),a))
colnames(Smarket_desc) <- c("variable","Variable Description")
rm(a)
Smarket_cor <- cor(Smarket[,-9])
attach(Smarket)
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = Smarket, family = binomial)
summary(glm.fit)
glm.fit <- glm(Direction ~ Lag1, data = Smarket, family = binomial)
summary(glm.fit)
kk <- c(140, 160, 145, 155, 160, 165, 140, 135, 138, 162)
sum(kk)
length(kk)
150
k1 <- kk
rm(kk)
k2 <- c(142, 161, 149, 156, 160, 165, 145, 137, 139, 161)
sum(k2)
151.5-150
k3 <- c(148, 152, 151, 149, 151, 153, 149, 147, 149, 151)
sum(k3)
k4 <- c(150, 153, 151, 148, 152, 152, 153, 151, 149, 150)
k <- as.list(k1,k2,k3,k4)
k
?list
k <- list(k1,k2,k3,k4)
k
var <- data.frame
var <- data.frame(NULL)
var <- numeric()
var <- numeric()
for (i in 1:4){
var[i] = sum(k[[i]])/length(k[[i]])
}
var
variance <- sum(var)/4
variance
variance <- sum(var - 150)/4
variance
mean(k1)
setwd("ISLR")
library(ISLR)
wage <- wage
Wage <- Wage
fi3(Wage)
dim(Wage)
str(Wage)
Wage[1:5,1:5]
rownames(Wage)
str(Wage)
?Wage
levels(Wage$region)
summary(Wage$region)
str(Wage)
lm_fit <- lm(wage ~ poly(age, 4), data = Wage)
summary(lm_fit)
Smarket <- Smarket
glm.fit <- glm(Direction ~. -Year -Today, data = Smarket, family = binomial)
summary(glm.fit)
summary(lm_fit)
?poly
lm_fit <- lm(wage ~ poly(age, 4, raw = T), data = Wage)
summary(lm_fit)
lm2_fit <- lm(wage ~ cbind(age, age^2, age^3, age^4), data = Wage)
summary(lm2_fit)
attach(Wage)
cbind(age,age^2,age^3,age^4)
k <- cbind(age,age^2,age^3,age^4)
names(k)
colnames(k)
?par
args(par)
par(mfrow = c(1,2), mar = c(4,4,1,1), oma = c(0,0,4,0)) #mar is used to set white space within each plot. oma is used to set whitespace in the entire plot result.
?plot
?3lims
?xlims
?xlim
?cex
?plot
plot(age, wage, xlim = agelims, cex = 0.5, col = 'dark grey')
agelims = range(age)
agelims
dim(age)
length(age)
summary(age)
?predict.lm
list(1:5)
list(seq(1,5))
?seq
?predict.lm
lm2_preds <- predict(lm_fit, newdata = list(age = seq(agelims[1], agelims[2])),se = T)
lm2_preds
lm2_preds <- predict(lm_fit, newdata = list(age = seq(agelims[1], agelims[2])),se.fit = T)
lm2_preds <- predict(lm_fit, newdata = list(age = seq(agelims[1], agelims[2])),se.fit = T)
lm_preds <- predict(lm_fit, newdata = list(age = seq(agelims[1], agelims[2])),se.fit = T)
lm_SEbands <- cbind(lm_pred$fit + 2*lm_preds$se.fit, lm_pred$fit - 2*lm_preds$se.fit)
lm_SEbands <- cbind(lm_preds$fit + 2*lm_preds$se.fit, lm_preds$fit - 2*lm_preds$se.fit)
lm_SEbands[1:5,]
plot(age, wage, xlim = agelims, cex = 0.5, col = 'dark grey')
title("Degree - 4 Polynomial", outer = T)
?lines
agerange <- seq(agelims[1],agelims[2])
lines(agerange, lm_preds$fit, lwd = 2, col = 'blue')
?matlines
matlines(agerange, lm_SEbands, lwd = 1, col = 'blue', lty = 3)
matlines(agerange, lm_SEbands, lwd = 1, col = 'red', lty = 3)
matlines(agerange, lm_SEbands, lwd = 1, col = 'blue', lty = 3)
par(mfrow = c(1,1), mar = c(4,4,1,1), oma = c(0,0,4,0)) #mar is used to set white space within each plot. oma is used to set whitespace in the entire plot result.
plot(age, wage, xlim = agelims, cex = 0.5, col = 'dark grey')
title("Degree - 4 Polynomial", outer = T)
lines(agerange, lm_preds$fit, lwd = 2, col = 'blue')
matlines(agerange, lm_SEbands, lwd = 1, col = 'blue', lty = 3)
lm1 <- lm(wage ~ age, data = Wage)
lm2 <- lm(wage ~ poly(age,2), data = Wage)
lm3 <- lm(wage ~ poly(age,3), data = Wage)
lm4 <- lm(wage ~ poly(age,4), data = Wage)
lm5 <- lm(wage ~ poly(age,5), data = Wage)
anova(lm1,lm2,lm3,lm4,lm5)
summary(Wage$wage)
wage2 <- Wage$wage >250
summary(wage2)
wage2[wage2 == T] = 1
summary(wage2)
wage2 <- rep(0, length(Wage$wage))
summary(wage2)
length(wage2)
wage2[Wage$wage >250] = 1
summary(wage2)
summary(as.factor(wage2))
lm1 <- ls()
lm1 <- lm1[lm1 != "Wage"]
rm(lm1)
lm1 <- ls()
lm1 <- lm1[lm1 != "Wage"]
rm(list = c(lm1))
wage2 <- rep(0, length(Wage$wage))
wage2[Wage$wage >250] = 1
glm_fit <- glm(wage2~ poly(age,4), data = Wage, family = 'binomial')
agelims <- range(Wage$age)
agerange <- seq(agelims[1],agelims[2])
glm_preds <- (glm_fit, newdata = list = (age = agerange), se.fit = T)
glm_preds <- (glm_fit, newdata = list(age = agerange), se.fit = T)
?predict.glm
glm_odds <- predict(glm_fit, newdata = list(age = agerange), se.fit = T)
glm_sebands <- cbind(glm_odds$fit + 2*glm_odds$se.fit, glm_odds$fit - 2*glm_odds$se.fit )
glm_sebands <- exp(glm_sebands)/(1+exp(glm_sebands))
lm_fit <- lm(wage ~ poly(age, 4, raw = T), data = Wage)
agelims <- range(age)
agerange <- seq(agelims[1],agelims[2])
lm_preds <- predict(lm_fit, newdata = list(age = agerange),se.fit = T)
par(mfrow = c(1,2), mar = c(4,4,1,1), oma = c(0,0,4,0)) #mar is used to set white space within each plot. oma is used to set whitespace in the entire plot result.
lm_SEbands <- cbind(lm_preds$fit + 2*lm_preds$se.fit, lm_preds$fit - 2*lm_preds$se.fit) #we includes bands as well
plot(age, wage, xlim = agelims, cex = 0.5, col = 'dark grey')
title("Degree - 4 Polynomial", outer = T)
lines(agerange, lm_preds$fit, lwd = 2, col = 'blue')
matlines(agerange, lm_SEbands, lwd = 1, col = 'blue', lty = 3)
lm1 <- ls()
lm1 <- lm1[lm1 != "Wage"]
rm(list = c(lm1))
?plot
glm_pfits <- exp(glm_odds)/(1+exp(glm_odds))
wage2 <- rep(0, length(Wage$wage))
wage2[Wage$wage >250] = 1
glm_fit <- glm(wage2~ poly(age,4), data = Wage, family = 'binomial')
agelims <- range(Wage$age)
agerange <- seq(agelims[1],agelims[2])
glm_odds <- predict(glm_fit, newdata = list(age = agerange), se.fit = T)
glm_pfits <- exp(glm_odds)/(1+exp(glm_odds))
glm_sebands <- cbind(glm_odds$fit + 2*glm_odds$se.fit, glm_odds$fit - 2*glm_odds$se.fit)
glm_sebands <- exp(glm_sebands)/(1+exp(glm_sebands))
plot(age, wage2, xlim = agerange, type = "n", ylim = c(0, 0.2))
plot(age, wage2, xlim = agelims, type = "n", ylim = c(0, 0.2))
lm_fit <- lm(wage ~ poly(age, 4, raw = T), data = Wage)
lm_preds <- predict(lm_fit, newdata = list(age = agerange),se.fit = T)
par(mfrow = c(1,2), mar = c(4,4,1,1), oma = c(0,0,4,0)) #mar is used to set white space within each plot. oma is used to set whitespace in the entire plot result.
lm_SEbands <- cbind(lm_preds$fit + 2*lm_preds$se.fit, lm_preds$fit - 2*lm_preds$se.fit) #we includes bands as well
plot(age, wage, xlim = agelims, cex = 0.5, col = 'dark grey')
title("Degree - 4 Polynomial", outer = T)
lines(agerange, lm_preds$fit, lwd = 2, col = 'blue')
matlines(agerange, lm_SEbands, lwd = 1, col = 'blue', lty = 3)
plot(age, wage2, xlim = agelims, type = "n", ylim = c(0, 0.2))
?jitter
points(age,wage2/5, cex = 0.5, pch = "l", col = 'dark grey')
lines(agerange, glm_pfits, lwd = 2, col = 'blue')
glm_pfits <- exp(glm_odds)/(1+exp(glm_odds))
glm_pfits <- exp(glm_odds$fit)/(1+exp(glm_odds$fit))
lines(agerange, glm_pfits, lwd = 2, col = 'blue')
matlines(agerange, glm_sebands, lwd = 1, col = 'blue', lty = 3)
cut(age,4)
table(cut(age,4))
lm_step <- lm(wage ~ cut(age,4), data = Wage)
summary(lm_step)
lm.splines
?splines
library(splines)
?splines
?lm {splines}
?bs
Wage <- Wage
summary(age)
bs(age, knots = c(25,40,60), data = Wage)
bs(age, knots = c(25,40,60))
age3_spline <- bs(age, knots = c(25,40,60), degree = 3)
bs_age3 <- bs(age, knots = c(25,40,60), degree = 3)
spline3 <- lm(wage ~ bs_age3, data = Wage)
summary(spline3)
class(bs_age3)
names(bs_age3)
bs_age3$bs
bs_age3
agelims <- range(age)
agerange <- seq(agelims[1],agelims[2])
spl3 <- lm(wage ~ bs_age3, data = Wage)
spl3_preds <- predict(spl3, newdata = list(age = agerange), se.fit = T)
plot(age,wage,col = 'gray')
par(mfrow = c(1,1))
plot(age,wage,col = 'gray')
plot(age,wage,col = 'dark gray')
lines(agerange, spl3_preds$fit, lwd = 2, col = 'blue')
length(spl3_preds$fit)
length(agerange)
agelims
agerange <- seq(agelims[1],agelims[2])
spl3_preds <- predict(spl3, newdata = list(age = agerange), se.fit = T)
plot(age,wage,col = 'dark gray')
lines(agerange, spl3_preds$fit, lwd = 2, col = 'blue')
?predict.lm
spl3_preds <- predict(spl3, newdata = list(age = agerange), se.fit = T)
spl3_preds
lm_fit <- lm(wage ~ poly(age, 4, raw = T), data = Wage)
lm_preds <- predict(lm_fit, newdata = list(age = agerange),se.fit = T)
length(lm_preds$fit)
spl3 <- lm(wage ~ bs(age, knots = c(25,40,60), degree = 3), data = Wage)
spl3_preds <- predict(spl3, newdata = list(age = agerange), se.fit = T)
plot(age,wage,col = 'dark gray')
lines(agerange, spl3_preds$fit, lwd = 2, col = 'blue')
spl3_sebands <- cbind(spl3_preds$fit + 2*spl3_preds$se.fit,spl3_preds$fit - 2*spl3_preds$se.fit)
matlines(agerange, spl3_sebands, lwd = 1, lty = 'dashed')
matlines(agerange, spl3_sebands, lwd = 1, lty = 'dashed', col = 'blue')
ns(age, age, df = 4)
ns(age, df = 4)
nspl3 <- lm(wage ~ ns(age, df=4, degree=3), data = Wage)
?ns
nspl3 <- lm(wage ~ ns(age, df=4), data = Wage)
nspl3_preds <- predict(nspl3, newdata = list(age = agerange), se.fit = T)
lines(agerange, nspl3_preds$fit, lwd = 2, col = 'red')
lines(agerange, nspl3_preds$fit +2*nspl3_preds$se.fit, lwd = 1, col = 'red', lty ='dashed')
lines(agerange, nspl3_preds$fit -2*nspl3_preds$se.fit, lwd = 1, col = 'red', lty ='dashed')
?smooth.spline
sspl <- smooth.spline(age,wage, df =16) #has no function for degree again
class(sspl)
names(sspl)
sspl$lambda
sspl$lambda
sspl2 <- smooth.spline(age,wage, cv = T)
sspl2$df
sspl2$lambda
plot(age,wage,xlim = agelims, cex = 0.5, col = "darkgrey")
plot(age,wage,xlim = agelims, cex = 0.5, col = "darkgrey", pch = 4)
plot(age,wage,xlim = agelims, cex = 0.5, col = "darkgrey")
lines(sspl, col = 'red', lwd = 2)
lines(sspl2, col = 'blue', lwd =2)
?legend
legend("topright", legend = c("16 DF", "6.8 DF"), col = c('red','blue'), lty = 1, lwd = 2, cex = 0.8)
lr <- loess(wage ~ age, span = 0.2, data = Wage)
lr2 <- loess(wage ~ age, span = 0.5, data = Wage)
plot(age, wage, cex = 0.5, col = 'darkgrey')
plot(age, wage, xlim = agelims, cex = 0.5, col = 'darkgrey')
title("LOCAL REGRESSION")
lr_preds <- predict(lr,newdata = list(age =agerange))
lr_preds <- predict(lr,newdata = data.frame(age =agerange))
?lr
?loess
?predict.loess
?predict.ns
?predict.lm
lr2_preds <- predict(lr2, newdata = data.frame(age =agerange))
lines(agerange, lr_preds, col = 'red', lwd = 2 )
lines(agerange, lr2_preds, col = 'blue', lwd = 2)
legend("topright", legend = c("Span 0.2", "Span 0.5"), col =c('red','blue'), lwd = 2, cex = 0.8, lty = 1)
library(gam)
install.packages("gam")
Library(gam)
library(gam)
?ns
GAM1 <- lm(wage ~ ns(year,df = 4) + ns(age, df = 4) + education, data = Wage)
summary(GAM1)
?S
?S
?s
GAM2 <- gam(wage ~ s(year, df=4) + s(age, df = 4) + education, data = Wage)
?plot.gam()
plot(GAM2, se = T, col = 'blue')
plot.gam(GAM1, se = T, col = 'red')
par(mfrow = c(1,3))
plot(GAM2, se = T, col = 'blue')
par(mfrow = c(3,1))
plot(GAM2, se = T, col = 'blue')
plot.gam(GAM1, se = T, col = 'red')
plot(GAM2, se = T, col = 'blue')
plot.gam(GAM1, se = T, col = 'red')
GAM2 <- gam(wage ~ s(year, df=4) + s(age, df = 5) + education, data = Wage)
plot(GAM2, se = T, col = 'blue')
GAM1 <- gam(wage ~ s(age, df=5) +education, data = Wage)
GAM3 <- gam(wage ~ year + s(age, df=5) + education, data = Wage) #Assumes linear form of year
plot(GAM2)
plot(GAM2, se = T, col = 'blue')
plot(GAM3, se = T, col = 'red')
?anova
?anova.gamlist()
?anova.gamlist
anova(GAM1, GAM2, GAM3, test = "F")
anova(GAM1, GAM3, GAM2, test = "F")
summary(GAM2)
GAM4 <- gam(wage ~ s(year, df=4) + lo(age, span = 0.7) + education, data = Wage)
GAM5 <- gam(wage ~ lo(year,age, span = 0.5) + education, data = Wage)
summary(GAM5)
install.packages("akima")
library(akima)
plot(gam5)
plot(GAM5)
GAM_LogR <- gam(I(wage>250) ~ year + s(age,df=5) + education, family = 'binomial', data = Wage)
plot(GAM_LogR, se = T, col = 'green')
par(mfrow = c(3,1))
plot(GAM_LogR, se = T, col = 'green')
table(education, I(wage>250))
GAM2_LogR <- gam(I(wage>250) ~ year + s(age,df=5) + education, family = 'binomial', data = Wage, subset = (education != "1. < HS Grad"))
plot(GAM2_LogR, se = T, col = 'Green')
